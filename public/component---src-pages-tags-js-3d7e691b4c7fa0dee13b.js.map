{"version":3,"sources":["webpack:///./src/components/Sidebar/Friend/index.js","webpack:///./src/components/Sidebar/LatestPost/index.js","webpack:///./src/components/Sidebar/Information/index.js","webpack:///./src/components/Sidebar/index.js","webpack:///./src/components/Tag/index.js","webpack:///./src/components/ExternalLink/index.js","webpack:///./src/pages/tags.js","webpack:///./src/components/SEO/index.js"],"names":["config","friends","Friend","className","map","friend","ExternalLink","href","title","key","rel","LatestPost","posts","node","to","frontmatter","url","slug","fields","Information","totalCount","defaultProps","wordings","githubUsername","twitterUsername","linkedinUsername","email","iconUrl","about","facebook","Icon","icon","target","Sidebar","latestPosts","src","alt","query","render","data","all","limited","Tag","name","count","TagPage","allMarkdownRemark","group","item","fieldValue","class","edges","edge","siteTitleAlt","isPost","description","image","pageQuery","SEO","content","type","JSON","stringify","alternateName","itemListElement","position","headline","schemaOrgJSONLD","property","siteFBAppID","twitter_username"],"mappings":"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","file":"component---src-pages-tags-js-3d7e691b4c7fa0dee13b.js","sourcesContent":["import React from 'react';\r\n\r\nimport ExternalLink from '../../ExternalLink';\r\n\r\nimport { config } from '../../../../data';\r\n\r\nimport './index.scss';\r\n\r\nconst { friends = [] } = config;\r\n\r\nconst Friend = () => (\r\n  <div className=\"friend\">\r\n    <p>Links</p>\r\n    {friends.map(friend => (\r\n      <ExternalLink\r\n        href={friend.href}\r\n        title={friend.title}\r\n        key={friend.title}\r\n        rel=\"noopener\"\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default Friend;\r\n","import React from 'react';\r\n\r\nimport { Link } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './index.scss';\r\n\r\nconst LatestPost = ({ posts }) => (\r\n  <div className=\"latest-post\">\r\n    <p>Latest Articles</p>\r\n    {posts.map(({ node }) => (\r\n      <Link\r\n        to={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n        key={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n        href={node.frontmatter.url || node.frontmatter.slug || node.fields.slug}\r\n      >\r\n        {node.frontmatter.title}\r\n      </Link>\r\n    ))}\r\n  </div>\r\n);\r\n\r\nLatestPost.propTypes = {\r\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default LatestPost;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Friend from '../Friend';\r\nimport LatestPost from '../LatestPost';\r\nimport './index.scss';\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst Information = ({ totalCount, posts }) => (\r\n  <div className=\"d-none d-lg-block information my-2\">\r\n    <hr />\r\n    <p>\r\n    Total&nbsp;\r\n      {totalCount}\r\n      &nbsp;Article\r\n    </p>\r\n    <hr />\r\n    <LatestPost posts={posts} />\r\n    <hr />\r\n    <Friend />\r\n  </div>\r\n);\r\n\r\nInformation.propTypes = {\r\n  totalCount: PropTypes.number.isRequired,\r\n  posts: PropTypes.array,\r\n};\r\n\r\nInformation.defaultProps = {\r\n  posts: [],\r\n};\r\n\r\nexport default Information;\r\n","import React from 'react';\r\nimport { Link, StaticQuery, graphql } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport { config } from '../../../data';\r\n\r\nimport Information from './Information';\r\n\r\nimport './index.scss';\r\n\r\nconst {\r\n  wordings = [],\r\n  githubUsername,\r\n  twitterUsername,\r\n  linkedinUsername,\r\n  email,\r\n  iconUrl,\r\n  about,\r\n  facebook,\r\n} = config;\r\n\r\nconst Icon = ({ href, icon }) => (\r\n  <a\r\n    target=\"_blank\"\r\n    href={href}\r\n    rel=\"external nofollow noopener noreferrer\"\r\n    className=\"custom-icon\"\r\n  >\r\n    <span className=\"fa-layers fa-fw fa-2x\">\r\n      <FontAwesomeIcon icon={icon} />\r\n    </span>\r\n  </a>\r\n);\r\n\r\nconst Sidebar = ({ totalCount, latestPosts }) => (\r\n  <header className=\"intro-header site-heading text-center col-xl-3 col-lg-3 col-xs-12 order-lg-1 display-none\">\r\n    <div className=\"about-me\">\r\n      <Link to={about} href={about} className=\"name\">\r\n        <img className=\"avatar\" src={iconUrl} alt=\"HeisenBerg\" />\r\n        <h4>Sai Krishna</h4>\r\n      </Link>\r\n      <p className=\"mb-1\">{wordings[1]}</p>\r\n      <p className=\"mb-3 wordings\">{wordings[0]}</p>\r\n      \r\n      \r\n      <Icon\r\n        href={`https://github.com/${githubUsername}`}\r\n        icon={['fab', 'github']}\r\n      />\r\n      <Icon\r\n        href={`https://www.linkedin.com/in/${linkedinUsername}`}\r\n        icon={['fab', 'linkedin']}\r\n      />\r\n      <Icon\r\n        href={`https://twitter.com/${twitterUsername}`}\r\n        icon={['fab', 'twitter']}\r\n      />\r\n      <Icon href={`mailto:${email}`} icon={['far', 'envelope']} />\r\n      {facebook\r\n        && <Icon href={`https://www.facebook.com/${facebook}/`} icon={['fab', 'facebook']} />\r\n      }\r\n      <Information totalCount={totalCount} posts={latestPosts} />\r\n    </div>\r\n  </header>\r\n);\r\n\r\nIcon.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  icon: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nSidebar.propTypes = {\r\n  totalCount: PropTypes.number,\r\n  latestPosts: PropTypes.array, //eslint-disable-line\r\n};\r\n\r\nSidebar.defaultProps = {\r\n  totalCount: 0,\r\n  latestPosts: [],\r\n};\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      fragment cardData on MarkdownRemark {\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          id\r\n          title\r\n          url: slug\r\n          date\r\n          tags\r\n          description\r\n          headerImage\r\n        }\r\n      }\r\n\r\n      query SidebarQuery {\r\n        all: allMarkdownRemark {\r\n          totalCount\r\n        }\r\n\r\n        limited: allMarkdownRemark(\r\n          sort: { order: DESC, fields: frontmatter___date }\r\n          limit: 6\r\n        ) {\r\n          latestPosts: edges {\r\n            node {\r\n              ...cardData\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={data => <Sidebar {...data.all} {...data.limited} />}\r\n  />\r\n);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Link} from 'gatsby';\r\n\r\nconst Tag = ({ name, count }) => (\r\n  <Link to={`/tag/${name}`} href={`/tag/${name}`} className=\"header-tag2\">\r\n    {name}\r\n    &nbsp;\r\n    {count}\r\n  </Link>\r\n);\r\n\r\nTag.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  count: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n};\r\n\r\nTag.defaultProps = {\r\n  count: '',\r\n};\r\n\r\nexport default Tag;\r\n","import React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ExternalLink = ({\r\n  href, title, target, className, rel,\r\n}) => (\r\n  <a href={href} rel={rel} target={target} className={className}>\r\n    {title}\r\n  </a>\r\n);\r\n\r\nExternalLink.propTypes = {\r\n  href: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  target: PropTypes.string,\r\n  className: PropTypes.string,\r\n  rel: PropTypes.string,\r\n};\r\n\r\nExternalLink.defaultProps = {\r\n  target: '_blank',\r\n  className: '',\r\n  rel: 'external nofollow noopener',\r\n};\r\n\r\nexport default ExternalLink;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport { Link } from 'gatsby';\r\nimport Sidebar from '../components/Sidebar';\r\nimport Tag from '../components/Tag';\r\nimport SEO from '../components/SEO';\r\nimport \"./pages.scss\"\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst TagPage = ({ data }) => {\r\n  const { allMarkdownRemark } = data;\r\n //console.log(allMarkdownRemark);\r\n // const mapping = {};\r\n\r\n\r\n  \r\n\r\n\r\n  return (\r\n    <div>\r\n    \r\n  \r\n    <div className=\"container\">\r\n     \r\n      <div className=\"row\">\r\n       \r\n        <Sidebar />\r\n        \r\n        <div className=\"tag-container col-xl-9 col-lg-6 col-md-12 col-sm-12 order-2\">\r\n        <div className=\"tag-header\">\r\n      <h1> TAGS</h1>\r\n    </div>\r\n          <div className=\"tag-div\">\r\n          {allMarkdownRemark.group.map(item => (\r\n            <Tag name={item.fieldValue} key={item.fieldValue} count={item.totalCount} />\r\n          ))}\r\n        </div>\r\n        <div>\r\n        {allMarkdownRemark.group.map(item => (\r\n          <div key={item.fieldValue}>\r\n          <hr class=\"tag-list-hr\"></hr>\r\n          <h4>{item.fieldValue} </h4>\r\n          <div className=\"flex overflow-auto-x tag-list scrollbar xxl-no-srollbar \" >\r\n          {item.edges.map(edge=>(\r\n            \r\n              <Link className=\"conact-card inline-flex tag-card\" key={edge.node.frontmatter.slug} href={`${edge.node.frontmatter.slug}`}>\r\n                  <p>{edge.node.frontmatter.title}</p>\r\n              </Link>\r\n             \r\n          ))}\r\n           </div>\r\n        </div>\r\n         ))}\r\n         </div>\r\n      </div>\r\n      \r\n      <SEO\r\n        title=\"read\"\r\n        url=\"/tags/\"\r\n        siteTitleAlt=\"HeisenBerg's Blog\"\r\n        isPost={false}\r\n        description=\"Tags Page\"\r\n        image=\"https://i.imgur.com/M795H8A.jpg\"\r\n      />\r\n    </div>\r\n    </div>\r\n    \r\n    </div>);\r\n};\r\n\r\nexport default TagPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query getAllTags {\r\n    allMarkdownRemark {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n        edges {\r\n          node {\r\n            frontmatter {\r\n              tags\r\n              title\r\n              slug\r\n            }\r\n          }\r\n        }\r\n       \r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport config from '../../../data';\r\n\r\nconst schemaOrgJSONLD = ({\r\n  url,\r\n  title,\r\n  siteTitleAlt,\r\n  isPost,\r\n  image,\r\n  description,\r\n}) => [\r\n  {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'WebSite',\r\n    url,\r\n    name: title,\r\n    alternateName: siteTitleAlt || '',\r\n  },\r\n  isPost\r\n    ? {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'BreadcrumbList',\r\n      itemListElement: [\r\n        {\r\n          '@type': 'ListItem',\r\n          position: 1,\r\n          item: {\r\n            '@id': url,\r\n            name: title,\r\n            image,\r\n          },\r\n        },\r\n      ],\r\n    }\r\n    : '',\r\n  isPost\r\n    ? {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'BlogPosting',\r\n      url,\r\n      name: title,\r\n      alternateName: siteTitleAlt || '',\r\n      headline: title,\r\n      image: {\r\n        '@type': 'ImageObject',\r\n        url: image,\r\n      },\r\n      description,\r\n    }\r\n    : '',\r\n];\r\n\r\nconst SEO = ({\r\n  url, title, description, image, siteTitleAlt, isPost,\r\n}) => (\r\n  <Helmet>\r\n    <title>{title}</title>\r\n\r\n    {/* General tags */}\r\n    <meta name=\"description\" content={description} />\r\n    <meta name=\"image\" content={image} />\r\n\r\n    {/* Schema.org tags */}\r\n    <script type=\"application/ld+json\">\r\n      {JSON.stringify(schemaOrgJSONLD(url, title, siteTitleAlt, isPost))}\r\n    </script>\r\n\r\n    {/* OpenGraph tags */}\r\n    <meta property=\"og:url\" content={url} />\r\n    {isPost ? (\r\n      <meta property=\"og:type\" content=\"article\" />\r\n    ) : (\r\n      <meta property=\"og:type\" content=\"website\" />\r\n    )}\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={description} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta\r\n      property=\"fb:app_id\"\r\n      content={config.siteFBAppID ? config.siteFBAppID : ''}\r\n    />\r\n\r\n    {/* Twitter Card tags */}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta\r\n      name=\"twitter:creator\"\r\n      content={config.twitter_username ? config.twitter_username : ''}\r\n    />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={description} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n  </Helmet>\r\n);\r\n\r\nSEO.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string,\r\n  description: PropTypes.string.isRequired,\r\n  image: PropTypes.string.isRequired,\r\n  siteTitleAlt: PropTypes.string.isRequired,\r\n  isPost: PropTypes.bool.isRequired,\r\n};\r\n\r\nSEO.defaultProps = {\r\n  title: config.title,\r\n};\r\n\r\nexport default SEO;\r\n"],"sourceRoot":""}